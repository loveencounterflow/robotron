// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CND, XTerm, alert, badge, blessed, copy_merge, debug, every, help, info, k, map, mylist, ref, rpr, screen, settings, status, urge, warn, whisper;

  /* https://ponyfoo.com/articles/understanding-javascript-async-await */
  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'YAU/DEMO-2';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  //...........................................................................................................
  copy_merge = require('merge-options');

  blessed = require('blessed');

  XTerm = require('blessed-xterm');

  every = function(dts, f) {
    return setInterval(f, dts * 1000);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.resolve_dependencies = function(settings, key) {
    return this._resolve_dependencies(settings, key, []);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._resolve_dependencies = function(settings, key, R) {
    var entry, sub_key;
    entry = settings[key];
    if (entry == null) {
      throw new Error(`unknown settings key ${rpr(key)}`);
    }
    R.unshift(key);
    if ((sub_key = entry._extends) != null) {
      return this._resolve_dependencies(settings, sub_key, R);
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._list_settings_from_key = function(settings, key) {
    var k;
    return (function() {
      var j, len, ref, results;
      ref = this.resolve_dependencies(settings, key);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        k = ref[j];
        results.push(settings[k]);
      }
      return results;
    }).call(this);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.settings_from_key = function(parent, settings, key) {
    var R, arity, f, j, k, len, ref;
    switch (arity = arguments.length) {
      case 2:
        [parent, settings, key] = [null, parent, settings];
        break;
      case 3:
        null;
        break;
      default:
        throw new Error(`expected 2 or 3 arguments, got ${arity}`);
    }
    //.........................................................................................................
    R = copy_merge(...(this._list_settings_from_key(settings, key)));
    ref = ['left', 'top', 'width', 'height'];
    for (j = 0, len = ref.length; j < len; j++) {
      k = ref[j];
      if (!CND.isa_function((f = R[k]))) {
        continue;
      }
      R[k] = f(parent);
    }
    //.........................................................................................................
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  settings = {
    //.........................................................................................................
    '*': {
      // smartCSR:             true
      fastCSR: true,
      // log:                  process.env.HOME + '/blessed-terminal.log'
      fullUnicode: true,
      dockBorders: true,
      ignoreDockContrast: true,
      autoPadding: false,
      mouse: true
    },
    //.........................................................................................................
    boxes: {
      _extends: '*',
      _uses: 'box',
      top: 10,
      left: 20,
      width: '50%',
      height: '50%',
      label: ' {bold}{cyan-fg} LABEL HERE {/cyan-fg}{/bold} {#0088ff-fg}(Drag Me){/#0088ff-fg} ',
      draggable: true,
      border: 'line',
      tags: true,
      style: {
        fg: 'default',
        bg: 'default',
        border: {
          fg: 'default'
        },
        focus: {
          border: {
            fg: 'cyan'
          }
        }
      }
    },
    // cursor:        { color: 'red', }
    //.........................................................................................................
    terminals: {
      style: {
        scrolling: {
          border: {
            fg: 'red'
          }
        }
      },
      _extends: 'boxes',
      _uses: 'xterm',
      shell: process.env.SHELL || 'sh',
      args: [],
      env: process.env,
      cwd: process.cwd(),
      cursorType: 'block',
      scrollback: 1000,
      label: "terminal",
      mousePassthrough: false
    },
    //.........................................................................................................
    statuses: {
      _extends: 'boxes',
      top: function(screen) {
        return screen.height - 1;
      },
      left: 0,
      width: '100%',
      // width:            'shrink'
      height: 1,
      border: null,
      style: {
        bg: 'blue'
      },
      label: null,
      content: "status",
      draggable: false
    },
    //.........................................................................................................
    status: {
      _extends: 'statuses',
      _show: true
    },
    //.........................................................................................................
    screen: {
      _extends: '*',
      log: '/tmp/blessed-terminal.log',
      _title: 'robotron'
    },
    //.........................................................................................................
    top_screen: {
      _extends: 'boxes',
      // _show:            yes
      top: 3,
      left: 80,
      width: '50%',
      height: 10,
      label: ' {bold}{cyan-fg}top{/cyan-fg}{/bold} {#0088ff-fg}(Drag Me){/#0088ff-fg} '
    },
    //.........................................................................................................
    fmanager: {
      _extends: 'boxes',
      // _show:            yes
      _uses: 'filemanager',
      label: CND.plum(' filemanager '),
      // // parent: screen
      border: 'line',
      top: 0,
      left: 80,
      width: '25%',
      height: '50%',
      draggable: true,
      mouse: true,
      cwd: __dirname
    },
    //.........................................................................................................
    top: {
      _extends: 'terminals',
      // _show:            yes
      shell: 'top',
      args: ['-d', '0.1'],
      left: 0,
      top: 0,
      width: function(screen) {
        return Math.floor(screen.width / 2);
      },
      height: function(screen) {
        return screen.height;
      },
      label: "Sample XTerm #1"
    },
    //.........................................................................................................
    htop: {
      _extends: 'terminals',
      // _show:            yes
      shell: 'htop',
      left: function(screen) {
        return Math.floor(screen.width / 2);
      },
      top: 0,
      width: function(screen) {
        return Math.floor(screen.width / 2);
      },
      height: function(screen) {
        return screen.height;
      },
      mousePassthrough: true,
      label: "htop"
    },
    //.........................................................................................................
    terminal: {
      _extends: 'terminals',
      // _show:            yes
      left: function(screen) {
        return Math.floor(screen.width / 3);
      },
      top: 0,
      width: 108,
      height: 20,
      mousePassthrough: true,
      label: "terminal"
    },
    //.........................................................................................................
    lists: {
      _extends: 'boxes',
      // style:
      //     scrolling: { border: { fg: 'red', }, }
      // style.selected  ### Style for a selected item.                                                                                                                                                                                                                      ###
      // style.item      ### Style for an unselected item.                                                                                                                                                                                                                   ###
      mouse: true/* Whether to automatically enable mouse support for this list (allows clicking items).                                                                                                                                                            */,
      // keys            ### Use predefined keys for navigating the list.                                                                                                                                                                                                    ###
      // vi              ### Use vi keys with the keys option.                                                                                                                                                                                                               ###
      // items           ### An array of strings which become the list's items.                                                                                                                                                                                              ###
      // search          ### A function that is called when vi mode is enabled and the key / is pressed. This function accepts a callback function which should be called with the search string. The search string is then used to jump to an item that is found in items.  ###
      interactive: true/* Whether the list is interactive and can have items selected (Default: true).                                                                                                                                                                    */,
      invertSelected: true/* Whether to automatically override tags and invert fg of item when selected (Default: true).                                                                                                                                                     */,
      scrollbar: {
        ch: ' ',
        track: {
          bg: 'red'
        },
        style: {
          inverse: true
        }
      },
      style: {
        shadow: true,
        blink: false,
        item: {
          hover: {
            bg: 'red'
          }
        },
        selected: {
          bg: 'blue',
          bold: true
        }
      }
    },
    //.........................................................................................................
    mylist: {
      _extends: 'lists',
      _show: true,
      label: CND.bold(CND.cyan(' Nodes ')),
      tags: true,
      draggable: true,
      top: 0,
      left: 0,
      width: 30,
      height: 10,
      keys: true
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  screen = blessed.screen(this.settings_from_key(settings, 'screen'));

  screen.title = (ref = settings.screen._title) != null ? ref : 'kannwas';

  screen.key(['escape', 'C-q'], function(chr, key) {
    return process.exit(0);
  });

  status = null;

  mylist = null;

  //-----------------------------------------------------------------------------------------------------------
  this.method_a = function() {
    var fmanager, htop, terminal_1, terminal_2;
    //...........................................................................................................
    // top_screen    = blessed.box         @settings_from_key screen, settings,  'top_screen'
    // top           = new XTerm           @settings_from_key screen, settings,  'top'
    fmanager = blessed.filemanager(this.settings_from_key(screen, settings, 'fmanager'));
    htop = new XTerm(this.settings_from_key(screen, settings, 'htop'));
    terminal_1 = new XTerm(this.settings_from_key(screen, settings, {
      top: 0,
      left: 0,
      width: '100%'
    }, 'terminal'));
    terminal_2 = new XTerm(this.settings_from_key(screen, settings, 'terminal'));
    mylist = blessed.list(this.settings_from_key(screen, settings, 'mylist'));
    status = blessed.box(this.settings_from_key(screen, settings, 'status'));
    // #...........................................................................................................
    // terminal.pty.on 'data', ( data ) ->
    //   screen.log JSON.stringify data
    mylist.on('action', function(...P) {
      return screen.log('22821', 'mylist', P);
    });
    //...........................................................................................................
    // screen.append top
    // screen.append body
    // screen.append top_screen
    // screen.append htop
    screen.append(terminal_1);
    screen.append(terminal_2);
    // screen.append fmanager
    screen.append(status);
    // screen.append mylist
    //...........................................................................................................
    fmanager.refresh();
    //...........................................................................................................
    mylist.focus();
    return screen.render();
  };

  //-----------------------------------------------------------------------------------------------------------
  this.method_b = function() {
    var R, classname, element, element_settings, entry, instantiator, key, ref1;
    R = {};
//.........................................................................................................
    for (key in settings) {
      entry = settings[key];
      if (!entry._show) {
        continue;
      }
      element_settings = this.settings_from_key(screen, settings, key);
      classname = (ref1 = entry._uses) != null ? ref1 : 'box';
      //.......................................................................................................
      switch (classname) {
        //.....................................................................................................
        case 'xterm':
          element = new XTerm(element_settings);
          break;
        default:
          //.....................................................................................................
          instantiator = blessed[classname];
          if (instantiator == null) {
            throw new Error(`unknown classname ${classname}`);
          }
          element = instantiator.call(blessed, element_settings);
      }
      //.......................................................................................................
      screen.append(element);
      R[key] = element;
    }
    //.........................................................................................................
    // terminal.focus()
    screen.render();
    return R;
  };

  this.method_a();

  // @method_b()
  /*
  line_count  = 20
  items       = []
  counter     = 1
  write_to_screen_one = ( text ) ->
    items.push text
    items.shift() if items.length > line_count + 1
    for i in [ 1 ... line_count ] by +1
      elements.screen_one.setLine i, items[ i ]
    screen.render()

  set_status = ( text ) ->
    elements.screen_one.setLine 0, text
    screen.render()

  every 0.01, ->
    set_status new Date().toISOString()
    counter += +1
    write_to_screen_one "Line number: #{counter}"
  */
  // list = blessed.list(
  //   label:      ' {bold}{cyan-fg}Art List{/cyan-fg}{/bold} (Drag Me) '
  //   tags:       true
  //   draggable:  true
  //   top:        0
  //   right:      0
  //   width:      30
  //   height:     '50%'
  //   keys:       true
  //   vi:         true
  //   mouse:      true
  //   border:     'line'
  //   scrollbar:
  //     ch:    ' '
  //     track: { bg: 'cyan'}
  //     style: { inverse: true}
  //   style:
  //     item:  { hover: bg: 'blue'}
  //     selected: { bg: 'blue', bold: true }
  //   search: ( callback ) ->
  //     prompt.input 'Search:', '', ( error, value ) ->
  //       return if error?
  //       callback null, value
  //     return
  // )
  map = {
    'node 01 a': {
      id: 'node01a',
      machine: 'node01'
    },
    'node 02 a': {
      id: 'node02a',
      machine: 'node02'
    },
    'node 03 a': {
      id: 'node03a',
      machine: 'node03'
    },
    'node 04 a': {
      id: 'node04a',
      machine: 'node04'
    },
    'node 05 a': {
      id: 'node05a',
      machine: 'node05'
    },
    'node 06 a': {
      id: 'node06a',
      machine: 'node06'
    },
    'node 07 a': {
      id: 'node07a',
      machine: 'node07'
    },
    'node 08 a': {
      id: 'node08a',
      machine: 'node08'
    },
    'node 09 a': {
      id: 'node09a',
      machine: 'node09'
    },
    'node 11 a': {
      id: 'node11a',
      machine: 'node11'
    },
    'node 12 a': {
      id: 'node12a',
      machine: 'node12'
    },
    'node 13 a': {
      id: 'node13a',
      machine: 'node13'
    },
    'node 14 a': {
      id: 'node14a',
      machine: 'node14'
    },
    'node 15 a': {
      id: 'node15a',
      machine: 'node15'
    },
    'node 16 a': {
      id: 'node16a',
      machine: 'node16'
    },
    'node 17 a': {
      id: 'node17a',
      machine: 'node17'
    },
    'node 18 a': {
      id: 'node18a',
      machine: 'node18'
    },
    'node 19 a': {
      id: 'node19a',
      machine: 'node19'
    }
  };

  mylist.setItems((function() {
    var j, len, ref1, results;
    ref1 = Object.keys(map);
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      k = ref1[j];
      results.push(CND.bold(CND.yellow(k)));
    }
    return results;
  })());

  mylist.on('select', function(element, selected) {
    var entry, key;
    // if mylist._.rendering
    //   return
    key = element.getText();
    entry = map[key];
    status.setContent(JSON.stringify(entry));
    screen.render();
  });

  // mylist._.rendering = true
  mylist.items.forEach(function(item, i) {
    var text;
    text = item.getText();
    item.setHover(map[text]);
  });

  // art.term.reset(); art.term.write body; art.term.cursorHidden = true
// if process.argv[2] == '--debug' or process.argv[2] == '--save'
//   takeScreenshot name

}).call(this);

//# sourceMappingURL=main.js.map
