// Generated by CoffeeScript 2.0.3
(function() {
  'use strict';
  var CND, XTerm, alert, badge, blessed, body, copy_merge, debug, every, fmanager, help, htop, info, line_count, ref, rpr, screen, settings, terminal, top, top_screen, urge, warn, whisper;

  /* https://ponyfoo.com/articles/understanding-javascript-async-await */
  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'YAU/DEMO-2';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  //...........................................................................................................
  copy_merge = require('merge-options');

  blessed = require('blessed');

  XTerm = require('blessed-xterm');

  every = function(dts, f) {
    return setInterval(f, dts * 1000);
  };

  //-----------------------------------------------------------------------------------------------------------
  line_count = 20;

  //-----------------------------------------------------------------------------------------------------------
  settings = {
    //.........................................................................................................
    '*': {
      smartCSR: true,
      // log:                  process.env.HOME + '/blessed-terminal.log'
      fullUnicode: true,
      dockBorders: true,
      ignoreDockContrast: true,
      autoPadding: false,
      mouse: true
    },
    //.........................................................................................................
    boxes: {
      _extends: '*',
      _uses: 'box',
      top: 10,
      left: 20,
      width: '50%',
      height: '50%',
      label: ' {bold}{cyan-fg} LABEL HERE {/cyan-fg}{/bold} {#0088ff-fg}(Drag Me){/#0088ff-fg} ',
      draggable: true,
      border: 'line',
      tags: true,
      style: {
        fg: 'default',
        bg: 'default',
        border: {
          fg: 'default'
        },
        focus: {
          border: {
            fg: 'cyan'
          }
        }
      }
    },
    // cursor:        { color: 'red', }
    //.........................................................................................................
    terminals: {
      style: {
        scrolling: {
          border: {
            fg: 'red'
          }
        }
      },
      _extends: 'boxes',
      _uses: 'xterm',
      shell: process.env.SHELL || 'sh',
      args: [],
      env: process.env,
      cwd: process.cwd(),
      cursorType: 'block',
      scrollback: 1000,
      label: "terminal",
      mousePassthrough: false
    },
    //.........................................................................................................
    screen: {
      _extends: '*',
      log: '/tmp/blessed-terminal.log',
      _title: 'robotron'
    },
    //.........................................................................................................
    screen_one: {
      _extends: 'boxes',
      _show: true,
      top: 10,
      left: 20,
      width: '50%',
      height: line_count,
      label: ' {bold}{cyan-fg}ANSI Art{/cyan-fg}{/bold} {#0088ff-fg}(Drag Me){/#0088ff-fg} '
    },
    //.........................................................................................................
    top_screen: {
      _extends: 'boxes',
      _show: true,
      top: 3,
      left: 80,
      width: '50%',
      height: 10,
      label: ' {bold}{cyan-fg}top{/cyan-fg}{/bold} {#0088ff-fg}(Drag Me){/#0088ff-fg} '
    },
    //.........................................................................................................
    fmanager: {
      _extends: 'boxes',
      _show: true,
      // // parent: screen
      border: 'line',
      top: 0,
      left: 80,
      width: '25%',
      height: '50%',
      draggable: true,
      mouse: true,
      cwd: __dirname
    },
    //.........................................................................................................
    top: {
      _extends: 'terminals',
      _show: true,
      shell: 'top',
      args: ['-d', '0.1'],
      left: 0,
      top: 0,
      width: function(screen) {
        return Math.floor(screen.width / 2);
      },
      height: function(screen) {
        return screen.height;
      },
      label: "Sample XTerm #1"
    },
    //.........................................................................................................
    htop: {
      _extends: 'terminals',
      _show: true,
      shell: 'htop',
      left: function(screen) {
        return Math.floor(screen.width / 2);
      },
      top: 0,
      width: function(screen) {
        return Math.floor(screen.width / 2);
      },
      height: function(screen) {
        return screen.height;
      },
      mousePassthrough: true,
      label: "htop"
    },
    //.........................................................................................................
    terminal: {
      _extends: 'terminals',
      _show: true,
      left: function(screen) {
        return Math.floor(screen.width / 3);
      },
      top: 0,
      width: 108,
      height: 20,
      mousePassthrough: true,
      label: "terminal"
    },
    //.........................................................................................................
    mylist: {
      _extends: 'boxes',
      _show: true
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  this.resolve_dependencies = function(settings, key) {
    return this._resolve_dependencies(settings, key, []);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._resolve_dependencies = function(settings, key, R) {
    var entry, sub_key;
    entry = settings[key];
    if (entry == null) {
      throw new Error(`unknown settings key ${rpr(key)}`);
    }
    R.unshift(key);
    if ((sub_key = entry._extends) != null) {
      return this._resolve_dependencies(settings, sub_key, R);
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._list_settings_from_key = function(settings, key) {
    var k;
    return (function() {
      var i, len, ref, results;
      ref = this.resolve_dependencies(settings, key);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        k = ref[i];
        results.push(settings[k]);
      }
      return results;
    }).call(this);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.settings_from_key = function(parent, settings, key) {
    var R, arity, f, i, k, len, ref;
    switch (arity = arguments.length) {
      case 2:
        [parent, settings, key] = [null, parent, settings];
        break;
      case 3:
        null;
        break;
      default:
        throw new Error(`expected 2 or 3 arguments, got ${arity}`);
    }
    //.........................................................................................................
    R = copy_merge(...(this._list_settings_from_key(settings, key)));
    ref = ['left', 'top', 'width', 'height'];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (!CND.isa_function((f = R[k]))) {
        continue;
      }
      R[k] = f(parent);
    }
    //.........................................................................................................
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  screen = blessed.screen(this.settings_from_key(settings, 'screen'));

  screen.title = (ref = settings.screen._title) != null ? ref : 'kannwas';

  screen.key(['escape', 'C-q'], function(chr, key) {
    return process.exit(0);
  });

  //...........................................................................................................
  body = blessed.box(this.settings_from_key(screen, settings, 'screen_one'));

  fmanager = blessed.filemanager(this.settings_from_key(screen, settings, 'fmanager'));

  top_screen = blessed.box(this.settings_from_key(screen, settings, 'top_screen'));

  top = new XTerm(this.settings_from_key(screen, settings, 'top'));

  htop = new XTerm(this.settings_from_key(screen, settings, 'htop'));

  terminal = new XTerm(this.settings_from_key(screen, settings, 'terminal'));

  // #...........................................................................................................
  // terminal.pty.on 'data', ( data ) ->
  //   screen.log JSON.stringify data

  //...........................................................................................................
  screen.append(top);

  screen.append(htop);

  screen.append(body);

  screen.append(fmanager);

  screen.append(top_screen);

  screen.append(terminal);

  /*
elements = {}
for key, entry of settings
  continue unless entry._show
  element_settings  = @settings_from_key screen, settings, key
  classname         = entry._uses ? 'box'
  switch classname
    when 'xterm'
      element = new XTerm element_settings
    else
      instantiator  = blessed[ classname ]
      throw new Error "unknown classname #{classname}" unless instantiator?
      element = instantiator.call blessed, element_settings
  screen.append element
  elements[ key ] = element
 * terminal.focus()
screen.render()

items   = []
counter = 1
write_to_screen_one = ( text ) ->
  items.push text
  items.shift() if items.length > line_count + 1
  for i in [ 1 ... line_count ] by +1
    elements.screen_one.setLine i, items[ i ]
  screen.render()

set_status = ( text ) ->
  elements.screen_one.setLine 0, text
  screen.render()

every 0.01, ->
  set_status new Date().toISOString()
  counter += +1
  write_to_screen_one "Line number: #{counter}"
 */

}).call(this);

//# sourceMappingURL=main.js.map
